REQUIRED PACKAGES:
	OpenCV-Contrib package (Version 4.5.5.62, LATEST VERSION DOES NOT WORK) -> pip install opencv-contrib-python == 4.5.5.62
	NumPy (Version 1.26.4, NumPy 2 DOES NOT WORK) -> pip install numpy==1.26.4

*Before installing packages uninstall any current versions of NumPy and OpenCV. 
*Opencv-contrib-python cannot be installed with Opencv-python also installed, only have 1 version of OpenCV installed

********************************************************************************************************************************************************************


The folder Calib_Data can be generated by running the 2 calibration files. The purpose is to get the camera data which can be slightly different between cameras of the same model, but can work as a "close-enough" but will have greater margins of error then if you run the calibration scripts yourself. 

CALIBRATION:
	Print or download the 7x10 checkerboard. 
	Run the "calibrate_generate_images.py" script, you will need to take ~10 photos with the checkboard in various positions (slightly tilted, offcenter, and in different quadrants of the camera)
		Press the "s" key on your keyboard (ensure CAPS lock off) to save images, on program end the script will create a folder (or save to an existing one) called "Calib_Imgs"
	Before running the "calibrate_gen_matrix.py" script there are a couple variables that will need to be modified
		Change the "SQUARE_SIZE" variable to the measurement of 1 square on your chessboard (in millimeters) 
		The "calib_data_path" variable is the path where the data generated will be saved
		The "image_dir_path" variable is where your images are stored, the "Calib_Imgs" folder from the previous step goes here

EXAMPLES:
	"ArUcoReader.py" needs to be in the same directory as the project you want to launch
	Code between the function "process_marker_data" is the loop that should be edited for logic that is reliant on the ArUco tag being read
	In the "Examples" folder are 2 ArUco tags that can be used (ID 0 and 1), print them for the most consistent read.
	"Drive_Certain_Distance.py", "Find_And_Drive.py", :Read_ have 2 variable that will need to be modified
		The "calib_data_path" variable is the same path from the calibration step
		The "marker_size" variable is the size of the ArUco that will be read, if testing multiple codes print them the same size. This variable is in centimeters
	"Drive_Certain_Distance.py" just see if a code is in it's camera view and drive forward until it's 10 inches away from the ArUco
	"Find_And_Drive.py" turns until it identifies a code and then drives toward the ArUco
	"Read_ArUco.py" just reads ArUco's codes
 

	

 
